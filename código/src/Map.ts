import p5 from 'p5';

const SIZE = 48;

export default class Map {
  countPj1Space: number = 0;
  countPj2Space: number = 0;
  r: number = 200;
  g: number = 200;
  b: number = 200;
  private level1: Array<Array<number>> = [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1],
    [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1],
    [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
    [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1],
    [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  ];

  // eslint-disable-next-line max-len
  // private level2: Array<Array<number>> = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  //   [1, 0, 0, 2, 0, 0, 1, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 1],
  //   [1, 0, 2, 2, 0, 0, 1, 0, 0, 2, 2, 2, 1, 0, 0, 0, 0, 0, 1],
  //   [1, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
  //   [1, 2, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 0, 0, 1, 1],
  //   [1, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 2, 1],
  //   [1, 2, 0, 2, 0, 2, 0, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 2, 1],
  //   [1, 2, 2, 0, 0, 2, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 2, 2, 1],
  //   [1, 0, 0, 2, 0, 2, 0, 1, 1, 1, 0, 2, 0, 2, 0, 1, 2, 2, 1],
  //   [1, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 1, 2, 0, 1],
  //   [1, 0, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 1, 2, 0, 1],
  //   [1, 0, 2, 0, 1, 0, 0, 0, 1, 1, 1, 2, 0, 2, 2, 2, 2, 0, 1],
  //   [1, 0, 2, 0, 1, 2, 0, 2, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 1],
  //   [1, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1],
  //   [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  // ];

  show(p:p5) {
    for (let i = 0; i < 15; i += 1) {
      for (let j = 0; j < 19; j += 1) {
        if (this.level1[i][j] === 1) {
          p.fill(0);
        } else {
          p.fill(this.r, this.g, this.b);
        }
        p.rect((j * SIZE) + 288, (i * SIZE), SIZE, SIZE);
      }
    }
  }

  // eslint-disable-next-line class-methods-use-this
  changeColor(p:p5, mx:number, my:number) {
    for (let i = 0; i < 15; i += 1) {
      for (let j = 0; j < 19; j += 1) {
        if (p.dist(mx, my, (i * SIZE), (j * SIZE) + 288) < SIZE / 2) {
          this.r = 151;
          this.g = 113;
          this.b = 169;
          this.countPj1Space += 1;
        }
      }
    }
  }
  //   for (let i = 0; i < 15; i += 1) {
  //     for (let j = 0; j < 19; j += 1) {
  //       if (this.level1[fil][col] === this.level1[i][j] && pj === 1) {
  //         p.fill(151, 113, 169);
  //         this.countPj1Space += 1;
  //       }
  //       if (this.level1[fil][col] === this.level1[i][j] && pj === 2) {
  //         p.fill(99, 177, 128);
  //         this.countPj2Space += 1;
  //       }
  //     }
  //   }
  // }

  canMove(fil: number, col: number): boolean {
    let result: boolean = false;
    switch (this.level1[col][fil]) {
      case 0:
        result = true;
        break;
      default:
        result = false;
        break;
    }
    return result;
  }
}
